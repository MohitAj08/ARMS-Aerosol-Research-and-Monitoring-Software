#define DEBUG
#include <Adafruit_GFX.h>    // Graphics Library
#include <Adafruit_TFTLCD.h> // LCD Library 
#include <stdint.h>
#include <SD.h>              // SD card Library
#include <SPI.h> 
#include "TouchScreen.h"
#include <virtuabotixRTC.h>

// Definition of LCD pins
#define LCD_CS A3   
#define LCD_CD A2   
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4

//Color chart
#define	BLUE    0x001F  
#define LIME    0x87E0
#define	GREEN   0x07E0
#define OLIVE   0x7BE0
#define YELLOW  0xFFE0
#define	BLACK   0x0000  
#define GRAY    0x7BEF
#define L_GRAY  0xC618
#define WHITE   0xFFFF
#define AQUA    0x5D1C
#define CYAN    0x07FF
#define D_CYAN  0x03EF
#define	RED     0xF800
#define ORANGE  0xFCA0
#define PINK    0xF97F
#define MAGENTA 0xF81F
#define BROWN   0x8200
#define VIOLET  0x9199
#define SILVER  0xA510
#define GOLD    0xA508
#define NAVY    0x000F
#define MAROON  0x7800
#define PURPLE  0X780F

// Touch Screen pins
#define YP A1
#define XM A2
#define YM 7
#define XP 6

// Pressure Thresholds
#define MINPRESSURE 1
#define MAXPRESSURE 1000

//Touch Screen Dimensions
short TS_MINX = 110; 
short TS_MINY = 120; 
short TS_MAXX = 950; 
short TS_MAXY = 920; 

// SD Card pins
//#if defined __AVR_ATmega2560__ 
#define SD_SCK 13
#define SD_MISO 12
#define SD_MOSI 11
//#endif
#define SD_CS 10

int flag=-1, indexSelect=0, envload=0, imgshow=0, backgroundColor, textColor, borderColor;  // Various Graphics and function selecting parameters
int oldhr=0, oldmin=0, oldsec=0;
int txpos, typos;
// Touchscreen element
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 500);

// LCD element
Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

// Time element
virtuabotixRTC myRTC(53, 51, 49);

////////////////////////////////////////////////////////////////////////// Functions to be run only once //////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(void) 
{
  tft.begin(0x9325);  // Initialising LCD
  
  SD.begin(SD_CS); // Initialising SD card
  
    switch(flag)
    {
      case -1: // flag=-1 implies that the program will run from the welcome image
        bmpDraw("1v.bmp", 0, 0);  // Drawing the welcome image
        flag=0;  // implies that on returning to the index from another function, the welcome image would no longer be loaded
        delay(2000);  // Wait for 2 seconds
        index();  // Display the Index
        break;
  
      case 0:  // As described above, this means that the Index function would be directly displayed
        index();  // The Index
        break;
    
      case 1:  //  flag=1 implies calling of the 1st function
        envload=1;  //  load the touchsreen conditions corresponding to the 1st funtion in loop()
        record();  //  The 1st function
        break;
  
      case 2:  // flag=2 implies calling of the 2nd function
        envload=2;  //  load touchscreen conditions corresponding to the 2nd function in loop()
        viewOld();  //  The 2nd function
        break;
  
      case 3:  // flag=3 implies calling of the 3rd function
        envload=3;  //  load touchscreen conditions corresponding to the 3rd function in loop()
        setDtm();  //  The 3rd function
        break;
    
      case 4:  // flag=4 implies calling of the 4th function
        envload=4;  //  load touchscreen conditions corresponding to the 4th function in loop()
        changeThm();  //  The 4th function
        break;
    
      case 5:  // flag=4 implies calling of the 4th function
        envload=5;  //  load touchscreen conditions corresponding to the 5th function in loop()
        shut();  //  The 5th function
        break;
    }  

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////// Functions to be run repeatedly ///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
{
  myRTC.updateTime();
  tft.setTextSize(1); 

  if(oldsec != myRTC.seconds)
  {
    tft.fillRect(6, 6, 15, 15, WHITE);
    tft.setTextColor(BLACK);
    tft.setCursor(8, 9);
    if(myRTC.hours<12)
    tft.print(myRTC.hours);
    else tft.print(myRTC.hours-12);
    oldhr=myRTC.hours;
  
    tft.fillRect(24, 6, 15, 15, WHITE);
    tft.setTextColor(BLACK);
    tft.setCursor(26, 9);
    tft.print(myRTC.minutes);
    oldmin=myRTC.minutes;
  
    tft.fillRect(42, 6, 15, 15, WHITE);
    tft.setTextColor(BLACK);
    tft.setCursor(44, 9);
    tft.print(myRTC.seconds);
    oldsec=myRTC.seconds;
  }
  
  digitalWrite(13, HIGH); 
  TSPoint p = ts.getPoint();    // Initialising touch screen
  digitalWrite(13, LOW);
  
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

  if(p.z > MINPRESSURE && p.z < MAXPRESSURE)  //If pressure lies in between 1 and 1000
  {

    p.x = map(p.x, TS_MINX, TS_MAXX, tft.height(), 0);      //Caliberate the coordinates of the touchsreen to the coordinates of the LCD
    p.y = map(p.y, TS_MINY, TS_MAXY, tft.width(), 0);

    if(indexSelect==0)     // indexSelect=0 implies that the we are selecting from the index
    { 
      
      if(detectPress(p.y, p.x, 7, 35, 230, 22)) // 1st function selected
      {
        tft.drawRoundRect(7,35, 230, 22, 5,WHITE);  //Draw the highlighting box and delay for half a second
        delay(500);
        indexSelect=1;  // Implies that a function has been selected from the index
        flag=1;  // flag=1 implies that we have selected the 1st function and are now re-running setup by calling that function instead of the index
        setup();  // Recalling setup() which will now load the 1st function instead of index
      }
   
      else if(detectPress(p.y, p.x, 7, 55, 230, 22))  // 2nd function selected
      {
        tft.drawRoundRect(7,55, 230, 22, 5,WHITE);  //Draw the highlighting box and delay for half a second
        delay(500);
        indexSelect=1;  // Implies that a function has been selected from the index
        flag=2;  // flag=2 implies that we have selected the 2nd function and are now re-running setup by calling that function instead of the index
        setup();  //Recalling setup() which will now load the 2nd function instead of index
      }

      else if(detectPress(p.y, p.x, 7, 75, 230, 22))  // 3rd function selected
      {
        tft.drawRoundRect(7,75, 230, 22, 5,WHITE);  //Draw the highlighting box and delay for half a second
        delay(500);
        indexSelect=1;  // Implies that a function has been selected from the index
        flag=3;  // flag=3 implies that we have selected the 3rd function and are now re-running setup by calling that function instead of the index
        setup();  //Recalling setup() which will now load the 3rd function instead of index
      }
      else if(detectPress(p.y, p.x, 7, 95, 230, 22))  // 4th function selected
      {
        tft.drawRoundRect(7,95, 230, 22, 5,WHITE);  //Draw the highlighting box and delay for half a second
        delay(500);
        indexSelect=1;  // Implies that a function has been selected from the index
        flag=4;  // flag=4 implies that we have selected the 4th function and are now re-running setup by calling that function instead of the index
        setup();  //Recalling setup() which will now load the 4th function instead of index
      }
      else if(detectPress(p.y, p.x, 7, 115, 230, 22))  // 5th function selected
      {
        tft.drawRoundRect(7,115, 230, 22, 5,WHITE);  //Draw the highlighting box and delay for half a second
        delay(500);
        indexSelect=1;  // Implies that a function has been selected from the index
        flag=5;  // flag=4 implies that we have selected the 5th function and are now re-running setup by calling that function instead of the index
        setup();  //Recalling setup() which will now load the 5th function instead of index
       }
    }//end of indexSelect=0 condition
    
    else if(indexSelect==1)  // indexSelect=1 implies that we have selected the function and it is time to set the touchscreen for the specified function
    {
      switch(envload) // envload determines for which function we wish to set the touchsreen conditions
      {
        case 1:  // for 1st function
          if(detectPress(p.y, p.x, 9, 30, 60, 22)){  // If the back button is pressed
            tft.drawRoundRect(9, 30, 60, 22, 5, GREEN);  // Highlight the back button with green color and wait for half second
            flag=0;  // To load index directly
            indexSelect=0;  // Ready to select function from index again
            delay(500);  
            setup();}  // Recalling setup to load index
          else if(detectPress(p.y, p.x, 80, 30, 80, 22)){  // If the Start button is pressed
              tft.drawRoundRect(80, 30, 80, 22, 5, RED);}  // Highlight the Start button with red
          break;
        
        case 2:  // for 2nd function
          if(detectPress(p.y, p.x, 9, 30, 60, 22)){  // If the back button is pressed
            tft.drawRoundRect(9, 30, 60, 22, 5, GREEN);  // Highlight the back button with green color and wait for half second
            flag=0;  // To load index directly
            indexSelect=0;  // Ready to select function from index again
            delay(500);
            setup();}  // Recalling setup to load index
          break;
        
        case 3:  // for 3rd function
          if(detectPress(p.y, p.x, 9, 30, 60, 22)){  // If the back button is pressed
            tft.drawRoundRect(9, 30, 60, 22, 5, GREEN);  // Highlight the back button with green color and wait for half second
            flag=0;  // To load index directly
            indexSelect=0;  // Ready to select function from index again
            delay(500);
            setup();}  // Recalling setup to load index
          break;

        case 4:  // for 4th function
          if(detectPress(p.y, p.x, 9, 30, 60, 22)){  // If the back button is pressed
            tft.drawRoundRect(9, 30, 60, 22, 5, GREEN);  // Highlight the back button with green color and wait for half second
            flag=0;  // To load index directly
            indexSelect=0;  // Ready to select function from index again
            delay(500);
            setup();}  // Recalling setup to load index
          else if(detectPress(p.y, p.x, 9, 287, 90, 22)){  //If the Restart button is pressed
            tft.drawRoundRect(9, 287, 90, 22, 5, RED);  // Highlight the Restart button with red color
            flag=-1;  // To load the welcome image before index
            indexSelect=0;  // Ready to select function from index again
            delay(500);
            setup();}  // Recalling setup to load index with the welcome image
          break;

        case 5:  // for 5th function
          tft.fillScreen(BLACK);  //If Shut down is requested
          break;
          
      }//end of switch(envload) condition
    }//end of indexSelect=1 condition
  }// end of pressure check condition
}// end of loop()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////// Index and the functions included in it///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
// Default welcome screen from v0.0

void welcome()
{ 
  
  tft.fillScreen(BLACK);
  tft.setCursor(80, 100);
  tft.setTextColor(YELLOW, BLUE);
  tft.setTextSize(2);
  tft.print("Welcome");
  tft.setCursor(110, 120);
  tft.print("to");
  tft.setCursor(70, 140);
  tft.print("ARMS v0.0");
}
*/

////////////////////////////////////////////////////////////// Index menu
void index()
{ 
  tft.drawRect(3, 3, tft.width()-3, tft.height()-3, WHITE);
  tft.setCursor(90, 7);

  tft.print("INDEX");
  
  tft.setCursor(12, 40);
  tft.print(">Record New");
  tft.setCursor(12, 60);
  tft.print(">View Older");
  tft.setCursor(12, 80);
  tft.print(">Set Date/Time");
  tft.setCursor(12, 100);
  tft.print(">Change Theme");
  tft.setCursor(12, 120);
  tft.print(">Shut Down");
}

////////////////////////////////////////////////// Record New Readings page
void record()
{
  environ("Record New Readings");
  createTab("Start", 80, 30, 80, 22, GREEN, BLACK);
  tft.drawRect(9, 57, 225, 240, WHITE);
}

//////////////////////////////////////////////////// View Old Readings page
void viewOld()
{
  environ("View Older Readings");
}

//////////////////////////////////////////////////////// Set Date/Time page
void setDtm()
{
  environ("Set Date/Time");
}

/////////////////////////////////////////////////////// Theme Settings page
void changeThm()
{
  environ("Theme Settings");
  createTab("Restart", 9, 287, 90, 22, WHITE, BLACK);
}

////////////////////////////////////////////////// Shutting down initiation
void shut()
{
  tft.fillScreen(BLACK);
  tft.setCursor(80, 100);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Goodbye!");
  delay(2000);
  tft.fillScreen(BLACK);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////// Functions for drawing graphics /////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Drawing the basic environment of any page with any title (except index and shutdown)
void environ(char title[])
{
  tft.drawRect(3, 3, tft.width()-3, tft.height()-3, WHITE);
  tft.fillRect(4, 4, tft.width()-5, 22, WHITE);
  tft.setCursor(9, 7);
  tft.print(title);

  // By default, every page except the shut down page has a tab to go back to the index
  tft.fillRoundRect(9, 30, 60, 22, 5, BLUE);
  tft.setCursor(14, 33);
  tft.setTextColor(BLACK);
  tft.print("Back");
   
}

// Drawing tabs
void createTab(char t[], int x0, int y0, int w, int h, int tabcol, int textcol)
{
  tft.fillRoundRect(x0, y0, w, h, 5, tabcol);
  tft.setCursor(x0+5, y0+3);
  tft.setTextColor(textcol);
  tft.print(t);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////Functions used to detect interaction with the screen//////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int detectPress(int curx, int cury, int x0, int y0, int w, int h)
{
  
  if(curx > x0 && curx < (x0 + w) && cury> y0 && cury < (y0 + h))
  {
    return 1;
  }
  
  else return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////Function to print the bmp image from the SD card///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define BUFFPIXEL 20

void bmpDraw(char *filename, int x, int y) {

  File     bmpFile;
  int      bmpWidth, bmpHeight;   // W+H in pixels
  uint8_t  bmpDepth;              // Bit depth (currently must be 24)
  uint32_t bmpImageoffset;        // Start of image data in file
  uint32_t rowSize;               // Not always = bmpWidth; may have padding
  uint8_t  sdbuffer[3*BUFFPIXEL]; // pixel in buffer (R+G+B per pixel)
  uint16_t lcdbuffer[BUFFPIXEL];  // pixel out buffer (16-bit per pixel)
  uint8_t  buffidx = sizeof(sdbuffer); // Current position in sdbuffer
  boolean  goodBmp = false;       // Set to true on valid header parse
  boolean  flip    = true;        // BMP is stored bottom-to-top
  int      w, h, row, col;
  uint8_t  r, g, b;
  uint32_t pos = 0, startTime = millis();
  uint8_t  lcdidx = 0;
  boolean  first = true;

  if((x >= tft.width()) || (y >= tft.height())) return;

#ifdef DEBUG
  tft.fillScreen(0);
  #endif
  // Open requested file on SD card
  if ((bmpFile = SD.open(filename)) == NULL) {
    #ifdef DEBUG
    #endif
    return;
  }

  // Parse BMP header
  if(read16(bmpFile) == 0x4D42) {
      // BMP signature
    #ifdef DEBUG
    read32(bmpFile);
    #else
        read32(bmpFile);
    #endif
    (void)read32(bmpFile); // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile); // Start of image data
    #ifdef DEBUG
    // Read DIB header
    read32(bmpFile);
    #else
    //read32(bmpFile);
    #endif

    bmpWidth  = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    if(read16(bmpFile) == 1) { // # planes -- must be '1'
      bmpDepth = read16(bmpFile); // bits per pixel
      #ifdef DEBUG
     // Serial.print(F("Bit Depth: ")); Serial.println(bmpDepth);
      #endif
      if((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed

        goodBmp = true; // Supported BMP format -- proceed!
        #ifdef DEBUG
        #endif
        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * 3 + 3) & ~3;

        // If bmpHeight is negative, image is in top-down order.
        // This is not canon but has been observed in the wild.
        if(bmpHeight < 0) {
          bmpHeight = -bmpHeight;
          flip      = false;
        }

        // Crop area to be loaded
        w = bmpWidth;
        h = bmpHeight;
        if((x+w-1) >= tft.width())  w = tft.width()  - x;
        if((y+h-1) >= tft.height()) h = tft.height() - y;

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x+w-1, y+h-1);

        for (row=0; row<h; row++) { // For each scanline...
          // Seek to start of scan line.  It might seem labor-
          // intensive to be doing this on every line, but this
          // method covers a lot of gritty details like cropping
          // and scanline padding.  Also, the seek only takes
          // place if the file position actually needs to change
          // (avoids a lot of cluster math in SD library).
          if(flip) // Bitmap is stored bottom-to-top order (normal BMP)
            pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
          else     // Bitmap is stored top-to-bottom
            pos = bmpImageoffset + row * rowSize;
          if(bmpFile.position() != pos) { // Need seek?
            bmpFile.seek(pos);
            buffidx = sizeof(sdbuffer); // Force buffer reload
          }

          for (col=0; col<w; col++) { // For each column...
            // Time to read more pixel data?
            if (buffidx >= sizeof(sdbuffer)) { // Indeed
              // Push LCD buffer to the display first
              if(lcdidx > 0) {
                tft.pushColors(lcdbuffer, lcdidx, first);
                lcdidx = 0;
                first  = false;
              }
              bmpFile.read(sdbuffer, sizeof(sdbuffer));
              buffidx = 0; // Set index to beginning
            }

            // Convert pixel from BMP to TFT format
            b = sdbuffer[buffidx++];
            g = sdbuffer[buffidx++];
            r = sdbuffer[buffidx++];
            lcdbuffer[lcdidx++] = tft.color565(r,g,b);
          } // end pixel
        } // end scanline
        // Write any remaining data to LCD
        if(lcdidx > 0) {
          tft.pushColors(lcdbuffer, lcdidx, first);
        }

      } // end goodBmp
    }
  }

  bmpFile.close();
  if(!goodBmp) tft.println(F("BMP format not recognized."));
}

// These read 16- and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File f) {
  uint16_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read(); // MSB
  return result;
}

uint32_t read32(File f) {
  uint32_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read();
  ((uint8_t *)&result)[2] = f.read();
  ((uint8_t *)&result)[3] = f.read(); // MSB
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
